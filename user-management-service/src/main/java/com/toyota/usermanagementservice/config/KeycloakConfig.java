package com.toyota.usermanagementservice.config;

import org.keycloak.admin.client.Keycloak;
import org.keycloak.admin.client.KeycloakBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Logger;

/**
 * Configuration class for Keycloak integration.
 * This class ensures that the Keycloak instance is initialized after the {@link KeycloakInitializer} has run.
 * It reads the client secret from a file generated by the KeycloakInitializer and then configures a Keycloak client
 * that can be used throughout the application.
 */
@Configuration
@DependsOn("initializeKeycloak") // Ensure KeycloakInitializer completes first
public class KeycloakConfig {

    private static final Logger logger = Logger.getLogger(KeycloakConfig.class.getName());

    /**
     * The URL of the Keycloak server.
     */
    @Value("${keycloak.server-url}")
    private String serverUrl;

    /**
     * The realm used for Keycloak authentication.
     */
    @Value("${keycloak.realm}")
    private String realm;

    /**
     * The client ID used to authenticate against Keycloak.
     */
    @Value("${keycloak.client-id}")
    private String clientId;

    /**
     * The OAuth2 grant type used for authentication (e.g., client_credentials).
     */
    @Value("${keycloak.grant-type}")
    private String grantType;

    /**
     * The scope requested from Keycloak during authentication (e.g., openid, profile, email).
     */
    @Value("${keycloak.scope}")
    private String scope;

    /**
     * The path to the file containing the client secret.
     */
    @Value("${keycloak.client-secret-path}")
    private String clientSecretPath;

    /**
     * Reads the client secret from a file and creates a Keycloak instance.
     * This Keycloak client will be used for administrative tasks such as creating realms, clients, users, and assigning roles.
     * It is ensured that the client secret is read after the KeycloakInitializer writes it to a file.
     *
     * @return A configured {@link Keycloak} instance.
     * @throws IOException If there is an issue reading the client secret file.
     */
    @Bean
    public Keycloak keycloak() throws IOException {

        // Read the client secret from the file generated by KeycloakInitializer
        String clientSecret = readSecretFromFile(clientSecretPath);
        logger.info("Creating Keycloak instance");
        logger.info("Client secret: " + clientSecret);

        // Create and return the Keycloak instance
        return KeycloakBuilder.builder()
                .serverUrl(serverUrl)
                .realm(realm)
                .clientId(clientId)
                .clientSecret(clientSecret)
                .grantType(grantType)
                .scope(scope)
                .build();
    }

    /**
     * Reads the client secret from the specified file path.
     *
     * The file path is a relative path to the project directory. The method will ensure
     * it is read correctly based on the current project structure.
     *
     * @param filePath The path of the file containing the client secret.
     * @return The client secret as a String.
     * @throws IOException If there is an issue reading the file.
     */
    private String readSecretFromFile(String filePath) throws IOException {
        // Resolve the absolute file path using the user.dir system property and the provided relative path
        String absoluteFilePath = System.getProperty("user.dir") + "/" + filePath;
        logger.info("Reading client secret from file: " + absoluteFilePath);
        return Files.readString(Paths.get(absoluteFilePath));
    }
}
